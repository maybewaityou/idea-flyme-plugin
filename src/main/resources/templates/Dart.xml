<templateSet group="MeePwn-Dart">
  <template name="asdasdasd" value="print('== $DESC$ ===&gt;&gt;&gt;&gt; ${$VALUE$}');&#10;$END$" description="" toReformat="true" toShortenFQNames="true">
    <variable name="DESC" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="asdasd" value="print('== $DESC$ ===&gt;&gt;&gt;&gt; $$$VALUE$');&#10;$END$" description="" toReformat="true" toShortenFQNames="true">
    <variable name="DESC" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="cremote" value="import 'package:$PROJECT$/common/service/network_service.dart';&#10;import 'package:$PROJECT$/feature/$MODULE_LOWERCASE$/domain/repository/repository.dart';&#10;import 'package:injectable/injectable.dart';&#10;&#10;abstract class I$MODULE_UPPERCASE$DataSource implements I$REPOSITORY_UPPERCASE$Repository {}&#10;&#10;//@named&#10;@LazySingleton(as: I$MODULE_UPPERCASE$DataSource)&#10;class $MODULE_UPPERCASE$DataSource implements I$MODULE_UPPERCASE$DataSource {&#10;  final NetworkService _service;&#10;&#10;  const $MODULE_UPPERCASE$DataSource(this._service);&#10;}&#10;" description="create a remote data source" toReformat="false" toShortenFQNames="true">
    <variable name="PROJECT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_LOWERCASE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_UPPERCASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <variable name="REPOSITORY_UPPERCASE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="clocal" value="import 'package:$PROJECT$/common/service/db_service.dart';&#10;import 'package:$PROJECT$/feature/$MODULE_LOWERCASE$/domain/repository/repository.dart';&#10;import 'package:injectable/injectable.dart';&#10;&#10;abstract class I$MODULE_UPPERCASE$DataSource implements I$REPOSITORY_UPPERCASE$Repository {}&#10;&#10;//@named&#10;@LazySingleton(as: I$MODULE_UPPERCASE$DataSource)&#10;class $MODULE_UPPERCASE$DataSource implements I$MODULE_UPPERCASE$DataSource {&#10;  final DBService _service;&#10;&#10;  const $MODULE_UPPERCASE$DataSource(this._service);&#10;}&#10;" description="create a local data source" toReformat="false" toShortenFQNames="true">
    <variable name="PROJECT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_LOWERCASE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_UPPERCASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <variable name="REPOSITORY_UPPERCASE" expression="" defaultValue="" alwaysStopAt="true" />
      <context>
        <option name="DART_TOPLEVEL" value="true" />
      </context>
  </template>
  <template name="cdatasource" value="import 'package:$PROJECT$/common/utils/function/functional.dart';&#10;&#10;abstract class $MODULE_UPPERCASE$DataSource {}&#10;" description="create data source" toReformat="false" toShortenFQNames="true">
    <variable name="PROJECT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_UPPERCASE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="crepository" value="import 'package:$PROJECT$/shared/domain/repository/repository.dart';&#10;&#10;abstract class I$MODULE_UPPERCASE$ implements IRepository {}&#10;" description="create a repository" toReformat="false" toShortenFQNames="true">
    <variable name="PROJECT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_UPPERCASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
      <context>
        <option name="DART_TOPLEVEL" value="true" />
      </context>
  </template>
  <template name="cusecase" value="import 'package:$PROJECT$/shared/application/use_case/use_case.dart';&#10;import 'package:$PROJECT$/feature/$MODULE_LOWERCASE$/domain/repository/repository.dart';&#10;import 'package:injectable/injectable.dart';&#10;&#10;abstract class I$MODULE_UPPERCASE$ implements IUseCase {}&#10;&#10;@LazySingleton(as: I$MODULE_UPPERCASE$)&#10;class $MODULE_UPPERCASE$ implements I$MODULE_UPPERCASE$ {&#10;  final I$REGISTORY_UPPERCASE$Repository repository;&#10;&#10;  const $MODULE_UPPERCASE$(this.repository);&#10;}&#10;" description="create a use case" toReformat="false" toShortenFQNames="true">
    <variable name="PROJECT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_LOWERCASE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_UPPERCASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <variable name="REGISTORY_UPPERCASE" expression="" defaultValue="" alwaysStopAt="true" />
      <context>
        <option name="DART_TOPLEVEL" value="true" />
      </context>
  </template>
  <template name="cvm" value="import 'package:flyme_annotation/flyme_annotation.dart';&#10;import 'package:$PROJECT$/shared/user_interface/view_model/view_model.dart';&#10;import 'package:injectable/injectable.dart';&#10;&#10;part '$MODULE_LOWERCASE$.g.dart';&#10;&#10;@injectable&#10;@Properties([])&#10;class $MODULE_UPPERCASE$ extends _$ViewModel {&#10;  @override&#10;  void init() {&#10;    print('==== $MODULE_UPPERCASE$ init ====');&#10;  }&#10;}&#10;" description="create a view model" toReformat="false" toShortenFQNames="true">
    <variable name="PROJECT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_LOWERCASE" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <variable name="MODULE_UPPERCASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
      <context>
        <option name="DART_TOPLEVEL" value="true" />
      </context>
  </template>
  <template name="init" value="@override&#10;void init() {&#10;  $END$&#10;}" description="init function" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="func" value="$RETURN_TYPE$ $FUNCTION_NAME$($PARAMS_TYPE$ $PARAMS$) {&#10;  $END$&#10;  return $RETURN_VALUE$;&#10;}" description="create a function" toReformat="false" toShortenFQNames="true">
    <variable name="RETURN_TYPE" expression="" defaultValue="&quot;returnType&quot;" alwaysStopAt="true" />
    <variable name="FUNCTION_NAME" expression="" defaultValue="&quot;functionName&quot;" alwaysStopAt="true" />
    <variable name="PARAMS_TYPE" expression="" defaultValue="&quot;paramsType&quot;" alwaysStopAt="true" />
    <variable name="PARAMS" expression="" defaultValue="&quot;params&quot;" alwaysStopAt="true" />
    <variable name="RETURN_VALUE" expression="" defaultValue="&quot;returnValue&quot;" alwaysStopAt="true" />
      <context>
        <option name="DART" value="true" />
      </context>
  </template>
  <template name="handleFunc" value="void handle$FUNCTION_NAME$($PARAMS_TYPE$ $PARAMS$) {&#10;  $END$&#10;}" description="create a handle function" toReformat="false" toShortenFQNames="true">
    <variable name="FUNCTION_NAME" expression="" defaultValue="&quot;functionName&quot;" alwaysStopAt="true" />
    <variable name="PARAMS_TYPE" expression="" defaultValue="&quot;paramsType&quot;" alwaysStopAt="true" />
    <variable name="PARAMS" expression="" defaultValue="&quot;params&quot;" alwaysStopAt="true" />
      <context>
        <option name="DART" value="true" />
        <option name="DART_STATEMENT" value="false" />
      </context>
  </template>
  <template name="arrow" value="void $FUNCTION_NAME$() {&#10;  $END$&#10;}" description="simple function" toReformat="false" toShortenFQNames="true">
    <variable name="FUNCTION_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="afunc" value="$RETURN_TYPE$ $FUNCTION_NAME$() =&gt; $RETURN_VALUE$;" description="function in one line" toReformat="false" toShortenFQNames="true">
    <variable name="RETURN_TYPE" expression="" defaultValue="&quot;void&quot;" alwaysStopAt="true" />
    <variable name="FUNCTION_NAME" expression="" defaultValue="&quot;functionName&quot;" alwaysStopAt="true" />
    <variable name="RETURN_VALUE" expression="" defaultValue="&quot;returnValue&quot;" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
    </context>
  </template>
  <template name="cstream" value="$TYPE$ _$NAME$ = $VALUE$;&#10;get $NAME$ =&gt; _$NAME$;&#10;set $NAME$($TYPE$ value) {&#10;  _$NAME$ = value;&#10;  notifyListeners();&#10;}" description="create values" toReformat="false" toShortenFQNames="true">
    <variable name="TYPE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
</templateSet>